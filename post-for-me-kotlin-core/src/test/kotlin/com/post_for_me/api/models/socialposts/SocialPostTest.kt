// File generated from our OpenAPI spec by Stainless.

package com.post_for_me.api.models.socialposts

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.post_for_me.api.core.JsonValue
import com.post_for_me.api.core.jsonMapper
import com.post_for_me.api.models.socialaccounts.SocialAccount
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class SocialPostTest {

    @Test
    fun create() {
        val socialPost =
            SocialPost.builder()
                .id("id")
                .addAccountConfiguration(
                    SocialPost.AccountConfiguration.builder()
                        .configuration(
                            SocialPost.AccountConfiguration.Configuration.builder()
                                .allowComment(true)
                                .allowDuet(true)
                                .allowStitch(true)
                                .addBoardId("string")
                                .caption(JsonValue.from(mapOf<String, Any>()))
                                .discloseBrandedContent(true)
                                .discloseYourBrand(true)
                                .isAiGenerated(true)
                                .isDraft(true)
                                .link("link")
                                .addMedia("string")
                                .placement(
                                    SocialPost.AccountConfiguration.Configuration.Placement.REELS
                                )
                                .privacyStatus("privacy_status")
                                .title("title")
                                .build()
                        )
                        .socialAccountId("social_account_id")
                        .build()
                )
                .caption("caption")
                .createdAt("created_at")
                .externalId("external_id")
                .addMedia(
                    SocialPost.Media.builder()
                        .url("url")
                        .thumbnailTimestampMs(JsonValue.from(mapOf<String, Any>()))
                        .thumbnailUrl(JsonValue.from(mapOf<String, Any>()))
                        .build()
                )
                .platformConfigurations(
                    PlatformConfigurationsDto.builder()
                        .bluesky(
                            BlueskyConfigurationDto.builder()
                                .caption(JsonValue.from(mapOf<String, Any>()))
                                .addMedia("string")
                                .build()
                        )
                        .facebook(
                            FacebookConfigurationDto.builder()
                                .caption(JsonValue.from(mapOf<String, Any>()))
                                .addMedia("string")
                                .placement(FacebookConfigurationDto.Placement.REELS)
                                .build()
                        )
                        .instagram(
                            InstagramConfigurationDto.builder()
                                .caption(JsonValue.from(mapOf<String, Any>()))
                                .addCollaborator("string")
                                .addMedia("string")
                                .placement(InstagramConfigurationDto.Placement.REELS)
                                .build()
                        )
                        .linkedin(
                            LinkedinConfigurationDto.builder()
                                .caption(JsonValue.from(mapOf<String, Any>()))
                                .addMedia("string")
                                .build()
                        )
                        .pinterest(
                            PinterestConfigurationDto.builder()
                                .addBoardId("string")
                                .caption(JsonValue.from(mapOf<String, Any>()))
                                .link("link")
                                .addMedia("string")
                                .build()
                        )
                        .threads(
                            ThreadsConfigurationDto.builder()
                                .caption(JsonValue.from(mapOf<String, Any>()))
                                .addMedia("string")
                                .placement(ThreadsConfigurationDto.Placement.REELS)
                                .build()
                        )
                        .tiktok(
                            TiktokConfiguration.builder()
                                .allowComment(true)
                                .allowDuet(true)
                                .allowStitch(true)
                                .caption(JsonValue.from(mapOf<String, Any>()))
                                .discloseBrandedContent(true)
                                .discloseYourBrand(true)
                                .isAiGenerated(true)
                                .isDraft(true)
                                .addMedia("string")
                                .privacyStatus("privacy_status")
                                .title("title")
                                .build()
                        )
                        .tiktokBusiness(
                            TiktokConfiguration.builder()
                                .allowComment(true)
                                .allowDuet(true)
                                .allowStitch(true)
                                .caption(JsonValue.from(mapOf<String, Any>()))
                                .discloseBrandedContent(true)
                                .discloseYourBrand(true)
                                .isAiGenerated(true)
                                .isDraft(true)
                                .addMedia("string")
                                .privacyStatus("privacy_status")
                                .title("title")
                                .build()
                        )
                        .x(
                            TwitterConfigurationDto.builder()
                                .caption(JsonValue.from(mapOf<String, Any>()))
                                .addMedia("string")
                                .build()
                        )
                        .youtube(
                            YoutubeConfigurationDto.builder()
                                .caption(JsonValue.from(mapOf<String, Any>()))
                                .addMedia("string")
                                .title("title")
                                .build()
                        )
                        .build()
                )
                .scheduledAt("scheduled_at")
                .addSocialAccount(
                    SocialAccount.builder()
                        .id("id")
                        .accessToken("access_token")
                        .accessTokenExpiresAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .externalId("external_id")
                        .metadata(JsonValue.from(mapOf<String, Any>()))
                        .platform("platform")
                        .refreshToken("refresh_token")
                        .refreshTokenExpiresAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .status(SocialAccount.Status.CONNECTED)
                        .userId("user_id")
                        .username("username")
                        .build()
                )
                .status(SocialPost.Status.DRAFT)
                .updatedAt("updated_at")
                .build()

        assertThat(socialPost.id()).isEqualTo("id")
        assertThat(socialPost.accountConfigurations())
            .containsExactly(
                SocialPost.AccountConfiguration.builder()
                    .configuration(
                        SocialPost.AccountConfiguration.Configuration.builder()
                            .allowComment(true)
                            .allowDuet(true)
                            .allowStitch(true)
                            .addBoardId("string")
                            .caption(JsonValue.from(mapOf<String, Any>()))
                            .discloseBrandedContent(true)
                            .discloseYourBrand(true)
                            .isAiGenerated(true)
                            .isDraft(true)
                            .link("link")
                            .addMedia("string")
                            .placement(
                                SocialPost.AccountConfiguration.Configuration.Placement.REELS
                            )
                            .privacyStatus("privacy_status")
                            .title("title")
                            .build()
                    )
                    .socialAccountId("social_account_id")
                    .build()
            )
        assertThat(socialPost.caption()).isEqualTo("caption")
        assertThat(socialPost.createdAt()).isEqualTo("created_at")
        assertThat(socialPost.externalId()).isEqualTo("external_id")
        assertThat(socialPost.media())
            .containsExactly(
                SocialPost.Media.builder()
                    .url("url")
                    .thumbnailTimestampMs(JsonValue.from(mapOf<String, Any>()))
                    .thumbnailUrl(JsonValue.from(mapOf<String, Any>()))
                    .build()
            )
        assertThat(socialPost.platformConfigurations())
            .isEqualTo(
                PlatformConfigurationsDto.builder()
                    .bluesky(
                        BlueskyConfigurationDto.builder()
                            .caption(JsonValue.from(mapOf<String, Any>()))
                            .addMedia("string")
                            .build()
                    )
                    .facebook(
                        FacebookConfigurationDto.builder()
                            .caption(JsonValue.from(mapOf<String, Any>()))
                            .addMedia("string")
                            .placement(FacebookConfigurationDto.Placement.REELS)
                            .build()
                    )
                    .instagram(
                        InstagramConfigurationDto.builder()
                            .caption(JsonValue.from(mapOf<String, Any>()))
                            .addCollaborator("string")
                            .addMedia("string")
                            .placement(InstagramConfigurationDto.Placement.REELS)
                            .build()
                    )
                    .linkedin(
                        LinkedinConfigurationDto.builder()
                            .caption(JsonValue.from(mapOf<String, Any>()))
                            .addMedia("string")
                            .build()
                    )
                    .pinterest(
                        PinterestConfigurationDto.builder()
                            .addBoardId("string")
                            .caption(JsonValue.from(mapOf<String, Any>()))
                            .link("link")
                            .addMedia("string")
                            .build()
                    )
                    .threads(
                        ThreadsConfigurationDto.builder()
                            .caption(JsonValue.from(mapOf<String, Any>()))
                            .addMedia("string")
                            .placement(ThreadsConfigurationDto.Placement.REELS)
                            .build()
                    )
                    .tiktok(
                        TiktokConfiguration.builder()
                            .allowComment(true)
                            .allowDuet(true)
                            .allowStitch(true)
                            .caption(JsonValue.from(mapOf<String, Any>()))
                            .discloseBrandedContent(true)
                            .discloseYourBrand(true)
                            .isAiGenerated(true)
                            .isDraft(true)
                            .addMedia("string")
                            .privacyStatus("privacy_status")
                            .title("title")
                            .build()
                    )
                    .tiktokBusiness(
                        TiktokConfiguration.builder()
                            .allowComment(true)
                            .allowDuet(true)
                            .allowStitch(true)
                            .caption(JsonValue.from(mapOf<String, Any>()))
                            .discloseBrandedContent(true)
                            .discloseYourBrand(true)
                            .isAiGenerated(true)
                            .isDraft(true)
                            .addMedia("string")
                            .privacyStatus("privacy_status")
                            .title("title")
                            .build()
                    )
                    .x(
                        TwitterConfigurationDto.builder()
                            .caption(JsonValue.from(mapOf<String, Any>()))
                            .addMedia("string")
                            .build()
                    )
                    .youtube(
                        YoutubeConfigurationDto.builder()
                            .caption(JsonValue.from(mapOf<String, Any>()))
                            .addMedia("string")
                            .title("title")
                            .build()
                    )
                    .build()
            )
        assertThat(socialPost.scheduledAt()).isEqualTo("scheduled_at")
        assertThat(socialPost.socialAccounts())
            .containsExactly(
                SocialAccount.builder()
                    .id("id")
                    .accessToken("access_token")
                    .accessTokenExpiresAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .externalId("external_id")
                    .metadata(JsonValue.from(mapOf<String, Any>()))
                    .platform("platform")
                    .refreshToken("refresh_token")
                    .refreshTokenExpiresAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .status(SocialAccount.Status.CONNECTED)
                    .userId("user_id")
                    .username("username")
                    .build()
            )
        assertThat(socialPost.status()).isEqualTo(SocialPost.Status.DRAFT)
        assertThat(socialPost.updatedAt()).isEqualTo("updated_at")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val socialPost =
            SocialPost.builder()
                .id("id")
                .addAccountConfiguration(
                    SocialPost.AccountConfiguration.builder()
                        .configuration(
                            SocialPost.AccountConfiguration.Configuration.builder()
                                .allowComment(true)
                                .allowDuet(true)
                                .allowStitch(true)
                                .addBoardId("string")
                                .caption(JsonValue.from(mapOf<String, Any>()))
                                .discloseBrandedContent(true)
                                .discloseYourBrand(true)
                                .isAiGenerated(true)
                                .isDraft(true)
                                .link("link")
                                .addMedia("string")
                                .placement(
                                    SocialPost.AccountConfiguration.Configuration.Placement.REELS
                                )
                                .privacyStatus("privacy_status")
                                .title("title")
                                .build()
                        )
                        .socialAccountId("social_account_id")
                        .build()
                )
                .caption("caption")
                .createdAt("created_at")
                .externalId("external_id")
                .addMedia(
                    SocialPost.Media.builder()
                        .url("url")
                        .thumbnailTimestampMs(JsonValue.from(mapOf<String, Any>()))
                        .thumbnailUrl(JsonValue.from(mapOf<String, Any>()))
                        .build()
                )
                .platformConfigurations(
                    PlatformConfigurationsDto.builder()
                        .bluesky(
                            BlueskyConfigurationDto.builder()
                                .caption(JsonValue.from(mapOf<String, Any>()))
                                .addMedia("string")
                                .build()
                        )
                        .facebook(
                            FacebookConfigurationDto.builder()
                                .caption(JsonValue.from(mapOf<String, Any>()))
                                .addMedia("string")
                                .placement(FacebookConfigurationDto.Placement.REELS)
                                .build()
                        )
                        .instagram(
                            InstagramConfigurationDto.builder()
                                .caption(JsonValue.from(mapOf<String, Any>()))
                                .addCollaborator("string")
                                .addMedia("string")
                                .placement(InstagramConfigurationDto.Placement.REELS)
                                .build()
                        )
                        .linkedin(
                            LinkedinConfigurationDto.builder()
                                .caption(JsonValue.from(mapOf<String, Any>()))
                                .addMedia("string")
                                .build()
                        )
                        .pinterest(
                            PinterestConfigurationDto.builder()
                                .addBoardId("string")
                                .caption(JsonValue.from(mapOf<String, Any>()))
                                .link("link")
                                .addMedia("string")
                                .build()
                        )
                        .threads(
                            ThreadsConfigurationDto.builder()
                                .caption(JsonValue.from(mapOf<String, Any>()))
                                .addMedia("string")
                                .placement(ThreadsConfigurationDto.Placement.REELS)
                                .build()
                        )
                        .tiktok(
                            TiktokConfiguration.builder()
                                .allowComment(true)
                                .allowDuet(true)
                                .allowStitch(true)
                                .caption(JsonValue.from(mapOf<String, Any>()))
                                .discloseBrandedContent(true)
                                .discloseYourBrand(true)
                                .isAiGenerated(true)
                                .isDraft(true)
                                .addMedia("string")
                                .privacyStatus("privacy_status")
                                .title("title")
                                .build()
                        )
                        .tiktokBusiness(
                            TiktokConfiguration.builder()
                                .allowComment(true)
                                .allowDuet(true)
                                .allowStitch(true)
                                .caption(JsonValue.from(mapOf<String, Any>()))
                                .discloseBrandedContent(true)
                                .discloseYourBrand(true)
                                .isAiGenerated(true)
                                .isDraft(true)
                                .addMedia("string")
                                .privacyStatus("privacy_status")
                                .title("title")
                                .build()
                        )
                        .x(
                            TwitterConfigurationDto.builder()
                                .caption(JsonValue.from(mapOf<String, Any>()))
                                .addMedia("string")
                                .build()
                        )
                        .youtube(
                            YoutubeConfigurationDto.builder()
                                .caption(JsonValue.from(mapOf<String, Any>()))
                                .addMedia("string")
                                .title("title")
                                .build()
                        )
                        .build()
                )
                .scheduledAt("scheduled_at")
                .addSocialAccount(
                    SocialAccount.builder()
                        .id("id")
                        .accessToken("access_token")
                        .accessTokenExpiresAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .externalId("external_id")
                        .metadata(JsonValue.from(mapOf<String, Any>()))
                        .platform("platform")
                        .refreshToken("refresh_token")
                        .refreshTokenExpiresAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .status(SocialAccount.Status.CONNECTED)
                        .userId("user_id")
                        .username("username")
                        .build()
                )
                .status(SocialPost.Status.DRAFT)
                .updatedAt("updated_at")
                .build()

        val roundtrippedSocialPost =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(socialPost),
                jacksonTypeRef<SocialPost>(),
            )

        assertThat(roundtrippedSocialPost).isEqualTo(socialPost)
    }
}
